@startuml CompositePatternClassDiagram

' Define interface for base components
interface Component {
  +operation() : void
}

' Define Leaf
class Leaf implements Component {
  +operation() : void
}

' Define Composite
class Composite implements Component {
  -children : List<Component>
  +add(component : Component) : void
  +remove(component : Component) : void
  +operation() : void
}

' Relations
Composite o-- Component : contains

note left of Component
  "Component" declares the interface 
  for objects in the composition.
end note

note right of Leaf
  "Leaf" represents leaf objects 
  in the composition. A leaf has 
  no children.
end note

note right of Composite
  "Composite" stores child components 
  and implements child-related operations 
  in the Component interface.
end note

@enduml
