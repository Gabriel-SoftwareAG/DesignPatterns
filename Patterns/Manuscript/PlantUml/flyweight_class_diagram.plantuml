@startuml FlyweightPatternClassDiagram

' Define the Flyweight interface
interface Flyweight {
  +operation(extrinsicState) : void
}

' Define the ConcreteFlyweight class
class ConcreteFlyweight implements Flyweight {
  -intrinsicState : String
  +operation(extrinsicState) : void
}

' Define the FlyweightFactory class
class FlyweightFactory {
  -flyweights : Map<String, Flyweight>
  +getFlyweight(key : String) : Flyweight
}

' Define the Client class
class Client {
  -flyweight : Flyweight
  +operation() : void
}

' Relationships
Flyweight <|.. ConcreteFlyweight
FlyweightFactory o-- Flyweight : Creates >
Client --> Flyweight : Uses >

note right of ConcreteFlyweight
  "ConcreteFlyweight" stores intrinsic\nstate that is shareable across many\nobjects and implements the operation\nusing both intrinsic and extrinsic state.
end note

note right of FlyweightFactory
  "FlyweightFactory" manages flyweight\nobjects and creates them as needed,\nensuring that flyweights are shared properly.
end note

note right of Client
  "Client" maintains extrinsic state\n(unique for each flyweight) and\npasses it to flyweight's operations.
end note

@enduml
